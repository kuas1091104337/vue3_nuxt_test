import{B as w,R as f,A as D,S as B,T as O,f as R,J as P,K as H,U as M,V as S,k as V,W as E,X as N,s as K}from"./C4-ekBSf.js";function T(e){return Array.isArray(e)?e:[e]}const j=e=>e==="defer"||e===!1;function F(...e){var g;const n=typeof e[e.length-1]=="string"?e.pop():void 0;typeof e[0]!="string"&&e.unshift(n);let[t,u,a={}]=e;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof u!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const r=w(),p=u,C=()=>f.value,b=()=>r.isHydrating?r.payload.data[t]:r.static.data[t];a.server??(a.server=!0),a.default??(a.default=C),a.getCachedData??(a.getCachedData=b),a.lazy??(a.lazy=!1),a.immediate??(a.immediate=!0),a.deep??(a.deep=f.deep),a.dedupe??(a.dedupe="cancel");const d=a.getCachedData(t,r),h=d!=null;if(!r._asyncData[t]||!a.immediate){(g=r.payload._errors)[t]??(g[t]=f.errorValue);const c=a.deep?D:B;r._asyncData[t]={data:c(h?d:a.default()),pending:D(!h),error:O(r.payload._errors,t),status:D("idle"),_default:a.default}}const s={...r._asyncData[t]};delete s._default,s.refresh=s.execute=(c={})=>{if(r._asyncDataPromises[t]){if(j(c.dedupe??a.dedupe))return r._asyncDataPromises[t];r._asyncDataPromises[t].cancelled=!0}if(c._initial||r.isHydrating&&c._initial!==!1){const l=c._initial?d:a.getCachedData(t,r);if(l!=null)return Promise.resolve(l)}s.pending.value=!0,s.status.value="pending";const o=new Promise((l,i)=>{try{l(p(r))}catch(y){i(y)}}).then(async l=>{if(o.cancelled)return r._asyncDataPromises[t];let i=l;a.transform&&(i=await a.transform(l)),a.pick&&(i=U(i,a.pick)),r.payload.data[t]=i,s.data.value=i,s.error.value=f.errorValue,s.status.value="success"}).catch(l=>{if(o.cancelled)return r._asyncDataPromises[t];s.error.value=S(l),s.data.value=V(a.default()),s.status.value="error"}).finally(()=>{o.cancelled||(s.pending.value=!1,delete r._asyncDataPromises[t])});return r._asyncDataPromises[t]=o,r._asyncDataPromises[t]},s.clear=()=>z(r,t);const _=()=>s.refresh({_initial:!0}),m=a.server!==!1&&r.payload.serverRendered;{const c=E();if(c&&m&&a.immediate&&!c.sp&&(c.sp=[]),c&&!c._nuxtOnBeforeMountCbs){c._nuxtOnBeforeMountCbs=[];const i=c._nuxtOnBeforeMountCbs;N(()=>{i.forEach(y=>{y()}),i.splice(0,i.length)}),K(()=>i.splice(0,i.length))}m&&r.isHydrating&&(s.error.value||d!=null)?(s.pending.value=!1,s.status.value=s.error.value?"error":"success"):c&&(r.payload.serverRendered&&r.isHydrating||a.lazy)&&a.immediate?c._nuxtOnBeforeMountCbs.push(_):a.immediate&&_();const o=H();if(a.watch){const i=R(a.watch,()=>s.refresh());o&&P(i)}const l=r.hook("app:data:refresh",async i=>{(!i||i.includes(t))&&await s.refresh()});o&&P(l)}const v=Promise.resolve(r._asyncDataPromises[t]).then(()=>s);return Object.assign(v,s),v}async function I(e){await new Promise(t=>M(t));const n=T(e);await w().hooks.callHookParallel("app:data:refresh",n)}function z(e,n){n in e.payload.data&&(e.payload.data[n]=void 0),n in e.payload._errors&&(e.payload._errors[n]=f.errorValue),e._asyncData[n]&&(e._asyncData[n].data.value=void 0,e._asyncData[n].error.value=f.errorValue,e._asyncData[n].pending.value=!1,e._asyncData[n].status.value="idle"),n in e._asyncDataPromises&&(e._asyncDataPromises[n]&&(e._asyncDataPromises[n].cancelled=!0),e._asyncDataPromises[n]=void 0)}function U(e,n){const t={};for(const u of n)t[u]=e[u];return t}export{I as r,F as u};
